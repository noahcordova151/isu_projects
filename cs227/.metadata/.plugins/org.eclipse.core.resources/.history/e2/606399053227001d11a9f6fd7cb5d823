package hw2;
import java.util.Random;

/**
 * 
 * @author Noah Cordova
 * 
 */
public class Padlock {
	
	/**
	 * Width of the teeth on each disc, expressed in degrees of rotation
	 */
	public static final int TOOTH = 2;
	
	/**
	 * Position of disc 1
	 */
	private int position1;
	
	/**
	 * Position of disc 2
	 */
	private int position2;
	
	/**
	 * Position of disc 3
	 */
	private int position3;
	
	/**
	 * Offset value of disc 1
	 */
	private int offset1;
	
	/**
	 * Offset value of disc 2
	 */
	private int offset2;
	
	/**
	 * Offset value of disc 3
	 */
	private int offset3;
	
	/**
	 * Whether the lock is open or not
	 */
	private boolean open;
	
	/**
	 * Constructs a padlock with combination n1, n2, n3
	 * @param n1 - first number in combination
	 * @param n2 - second number in combination
	 * @param n3 - third number in combination
	 */
	public Padlock(int n1, int n2, int n3){
		position1 = 2 * TOOTH;
		position2 = TOOTH;
		position3 = 0;
		offset1 = normalize(n1 - 2 * TOOTH);
		offset2 = n2 + TOOTH;
		offset3 = n3;
		open = true;
	}
	
	/**
	 * Returns current position of given disc
	 * @param which - disc number
	 * @return current position
	 */
	public int getDiscPosition(int which) {
		if (which == 1) {
			return position1;
		} 
		else if (which == 2) {
			return position2;
		} 
		else {
			return position3;
		}
	}
	
	/**
	 * Returns true if all three discs are aligned
	 * @return
	 */
	public boolean isAligned() {
		return ((position1 == offset1) && (position2 == offset2) && (position3 == offset3));
	}
	
	/**
	 * Returns true if the lock is currently open
	 * @return
	 */
	public boolean isOpen() {
		return open;
	}
	
	/**
	 * Closes the lock
	 */
	public void close() {
		open = false;
	}
	
	/**
	 * Opens the lock, if possible
	 */
	public void open() {
		open = isAligned();
	}
	
	/**
	 * Sets disc positions to random, valid values
	 * @param rand - random position value
	 */
	public void randomizePositions(java.util.Random rand) {
		int r1 = rand.nextInt(360);
		int r2 = rand.nextInt(360);
		int r3 = rand.nextInt(360);
		
		setPositions(r1, r2, r3);
	}
	
	/**
	 * Sets disc positions to given values or closest possible values
	 * @param n1 - position value for disc 1
	 * @param n2 - position value for disc 2
	 * @param n3 - position value for disc 3
	 */
	public void setPositions(int n1, int n2, int n3) {
		position1 = normalize(n1);
		position2 = normalize(n2);
		position3 = normalize(n3);
		
		if (position2 - position3 == 1) {
			position2 += 1;
		}
		else if (position3 - position2 == 1) {
			position2 += 1;
		} 
		else if (position3 - position2 == 0) {
			position2 += 2;
		}
		
		if (position1 - position2 == 1) {
			position1 += 1;
		}
		else if (position2 - position1 == 1) {
			position1 += 1;
		} else if (position2 - position1 == 0) {
			position1 += 2;
		} else if (((position1 + 1) % 360) == position2) {
			position2 += 1;
		}
		
	}
	
	/**
	 * Turns dial the given number of degrees,
	 * positive for counterclockwise and negative for clockwise
	 * @param degrees - number of degrees to turn by
	 */
	public void turn(int degrees) {
		int positionDifference = position2 - position3;
		int positionDifference2 = position1 - position2;
		int initialPosition2 = position2;
		
		position3 = normalize(position3 + normalize(degrees));
		
		//disc 3 effect on disc 2
		if ((normalize(positionDifference) <= degrees) && (degrees > 0)) {
			position2 = position3 + TOOTH;
		} 
		else if ((normalize(positionDifference * -1) < Math.abs(degrees - TOOTH)) && (degrees < 0)) {
			position2 = position3 - TOOTH;
		}
		
		//disc 2 effect on disc 1
		if ((normalize(positionDifference2) < Math.abs(initialPosition2 - position2)) && (degrees > 0)) {
			position1 = position2 + TOOTH;
		} 
		else if ((normalize(positionDifference2 * -1) < Math.abs(initialPosition2 - position2)) && (degrees < 0)) {
			position1 = position2 - TOOTH;
		}
	}
	
	/**
	 * Turns dial counterclockwise until given number is at the top
	 * @param number - number to turn to
	 */
	public void turnLeftTo(int number) {
		turn(normalize(360 - position3 + number));
	}
	
	/**
	 * Turns dial clockwise until given number is at the top
	 * @param number - number to turn to
	 */
	public void turnRightTo(int number) {
		turn(-1 * normalize(position3 - number));
	}
	
	/**
	 * Normalizes the position or rotation of any given value
	 * @param number - given value
	 * @return position - normalized value
	 */
	private int normalize(int number) {
		int position = number;
		
		if (number > 359) {
			position = number % 360;
		} 
		else if (number < 0) {
			position = 360 + number % 360;
		}
		
		return position;
	}
	
}
