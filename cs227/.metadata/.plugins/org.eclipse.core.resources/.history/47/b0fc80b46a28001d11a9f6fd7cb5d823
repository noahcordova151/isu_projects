package hw3;
import java.util.Random;
import java.util.ArrayList;
import static api.Direction.*;

import api.Shift;
import api.Direction;
import api.MoveResult;
import api.TilePosition;
import api.Descriptor;

/**
 * The Powers class contains the state and logic for an implementation of a game
 * similar to "2048".  The basic underlying state is an n by n grid of tiles, 
 * represented by integer values.  A zero in a cell is considered to be
 * "empty", and all other cells contain some power of two.  The game is played
 * by calling the method <code>shiftGrid()</code>, selecting one of the four
 * directions (LEFT, RIGHT, UP, DOWN). Each row or column is then collapsed
 * according to the algorithm described in the methods of <code>ShiftUtil</code>.
 * <p>
 * Whenever two cells are <em>merged</em>, the score is increased by the 
 * combined value of the two cells.
 * 
 * @author Noah Cordova
 */
public class Powers
{	
	/**
	 * 2-dimensional int array to represent the game grid
	 */
	private int[][] grid;

	/**
	 * Instance of utility class ShiftUtil
	 */
	private ShiftUtil util;
	
	/**
	 * Instance of Random object
	 */
	private Random rand;
	
	/**
	 * score for game
	 */
	private int score;
	
  /**
   * Constructs a game with a grid of the given size, using a default
   * random number generator.  Initially there should be two
   * nonempty cells in the grid selected by the method <code>generateTile()</code>.
   * @param givenSize
   *   size of the grid for this game
   * @param givenUtil
   *   instance of ShiftUtil to be used in this game
   */
  public Powers(int givenSize, ShiftUtil givenUtil)
  {
	score = 0;
    grid = new int[givenSize][givenSize];
    util = givenUtil;
    rand = new Random();
    TilePosition position = generateTile();
    grid[position.getRow()][position.getCol()] = position.getValue();
    position = generateTile();
	grid[position.getRow()][position.getCol()] = position.getValue();
  }
  
  /**
   * Constructs a game with a grid of the given size, using the given
   * instance of <code>Random</code> for its random number generator.
   * Initially there should be two nonempty cells in the grid selected 
   * by the method <code>generateTile()</code>.
   * @param givenSize
   *   size of the grid for this game
   * @param givenUtil
   *   instance of ShiftUtil to be used in this game
   * @param givenRandom
   *   given instance of Random
   */
  public Powers(int givenSize, ShiftUtil givenUtil, Random givenRandom)
  {
	  score = 0;
	  grid = new int[givenSize][givenSize];
	  util = givenUtil;
	  rand = givenRandom;
	  TilePosition position = generateTile();
	  grid[position.getRow()][position.getCol()] = position.getValue();
	  position = generateTile();
	  grid[position.getRow()][position.getCol()] = position.getValue();
  }
  
  /**
   * Returns the value in the cell at the given row and column.
   * @param row
   *   given row
   * @param col
   *   given column
   * @return
   *   value in the cell at the given row and column
   */
  public int getTileValue(int row, int col)
  {
    return grid[row][col];
  }
  
  /**
   * Sets the value of the cell at the given row and column.
   * <em>NOTE: This method should not normally be used by clients outside
   * of a testing environment.</em>
   * @param row
   *   given row
   * @param col
   *   given col
   * @param value
   *   value to be set
   */
  public void setValue(int row, int col, int value)
  {
    grid[row][col] = value;
  }
  
  /**
   * Returns the size of this game's grid.
   * @return
   *   size of the grid
   */
  public int getSize()
  {
    return grid.length;
  }
  
  /**
   * Returns the current score.
   * @return
   *   score for this game
   */
  public int getScore()
  {
    return score;
  }
  
  /**
   * Copy a row or column from the grid into a new one-dimensional array.  
   * There are four possible actions depending on the given direction:
   * <ul>
   *   <li>LEFT - the row indicated by the index <code>rowOrColumn</code> is
   *   copied into the new array from left to right
   *   <li>RIGHT - the row indicated by the index <code>rowOrColumn</code> is
   *   copied into the new array in reverse (from right to left)
   *   <li>UP - the column indicated by the index <code>rowOrColumn</code> is
   *   copied into the new array from top to bottom
   *   <li>DOWN - the row indicated by the index <code>rowOrColumn</code> is
   *   copied into the new array in reverse (from bottom to top)
   * </ul>
   * @param rowOrColumn
   *   index of the row or column
   * @param dir
   *   direction from which to begin copying
   * @return
   *   array containing the row or column
   */
  public int[] getRowOrColumn(int rowOrColumn, Direction dir)
  {
    int[] copy = new int[grid.length];
    
    if(dir.equals(LEFT))
    {
    	for (int col = 0; col < copy.length; col++)
    	{
    		copy[col] = grid[rowOrColumn][col];
    	}
    }
    else if(dir.equals(RIGHT))
    {
    	int gridCol = copy.length - 1;
    	for (int copyCol = 0; copyCol < copy.length; copyCol++)
    	{
    		copy[copyCol] = grid[rowOrColumn][gridCol--];
    	}
    }
    else if(dir.equals(UP))
    {
    	for (int row = 0; row < copy.length; row++)
    	{
    		copy[row] = grid[row][rowOrColumn];
    	}
    }
    else if(dir.equals(DOWN))
    {
    	int gridRow = copy.length - 1;
    	for (int copyRow = 0; copyRow < copy.length; copyRow++)
    	{
    		copy[copyRow] = grid[gridRow--][rowOrColumn];
    	}
    }
    
    return copy;
  }
  
  /**
   * Updates the grid by copying the given one-dimensional array into
   * a row or column of the grid.
   * There are four possible actions depending on the given direction:
   * <ul>
   *   <li>LEFT - the given array is copied into the the row indicated by the 
   *   index <code>rowOrColumn</code> from left to right
   *   <li>RIGHT - the given array is copied into the the row indicated by the 
   *   index <code>rowOrColumn</code> in reverse (from right to left)
   *   <li>UP - the given array is copied into the column indicated by the 
   *   index <code>rowOrColumn</code> from top to bottom
   *   <li>DOWN - the given array is copied into the column indicated by the 
   *   index <code>rowOrColumn</code> in reverse (from bottom to top)
   * </ul>
   * @param arr
   *   the array from which to copy
   * @param rowOrColumn
   *   index of the row or column
   * @param dir
   *   direction from which to begin copying
   */
  public void setRowOrColumn(int[] arr, int rowOrColumn, Direction dir)
  {
	  if(dir.equals(LEFT))
	  {
		  for (int col = 0; col < arr.length; col++)
		  {
			  grid[rowOrColumn][col] = arr[col];
		  }
	  }
	  else if(dir.equals(RIGHT))
	  {
		  int gridCol = grid.length - 1;
		  for (int arrCol = 0; arrCol < arr.length; arrCol++)
		  {
			  grid[rowOrColumn][gridCol--] = arr[arrCol];
		  }
	  }
	  else if(dir.equals(UP))
	  {
		  for (int row = 0; row < arr.length; row++)
		  {
			  grid[row][rowOrColumn] = arr[row];
		  }
	  }
	  else if(dir.equals(DOWN))
	  {
		  int gridRow = grid.length - 1;
		  for (int arrRow = 0; arrRow < arr.length; arrRow++)
		  {
			  grid[gridRow--][rowOrColumn] = arr[arrRow];
		  }
	  }
  }

  /**
   * Plays one step of the game by shifting the grid in the given direction.
   * Returns a <code>MoveResult</code> object containing a list of Descriptor 
   * objects describing all moves performed, and a <code>TilePosition</code> object describing
   * the position and value of a newly added tile, if any. 
   * If no tiles are actually moved, the returned <code>MoveResult</code> object contains an 
   * empty list and has a null value for the new <code>TilePosition</code>.
   * <p>
   * If any tiles are moved or merged, a new tile is selected according to the 
   * <code>generate()</code> method and is added to the grid.
   * <p>
   * The shifting of each individual row or column must be performed by the 
   * method <code>shiftAll</code> of <code>ShiftUtil</code>. 
   * 
   * @param dir
   *   direction in which to shift the grid
   * @return
   *   MoveResult object containing move descriptors and new tile position
   */
  public MoveResult doMove(Direction dir)
  {
	MoveResult moves = new MoveResult();
	
	int[] thisRow = new int[grid.length];
	int[] thisCol = new int[grid.length];
	if (dir.equals(LEFT))
    {
    	for (int row = 0; row < grid.length; row++)
    	{
    		for (int col = 0; col < grid.length; col++)
    		{
    			thisRow[col] = grid[row][col];
    		} 
    		ArrayList<Shift> shifts = util.shiftAll(thisRow);
    		for (int col = 0; col < grid.length; col++)
    		{
    			grid[row][col] = thisRow[col];
    		}
    		
    		//make descriptors based on shiftAll return and add to moves
    		for (int s = 0; s < shifts.size(); s++)
    		{
	    		if(shifts.get(s) != null)
	    		{
	    			Descriptor descriptor = new Descriptor(shifts.get(row), row, LEFT);
	        		moves.addMove(descriptor);
	        		//scoring
	        		if (descriptor.isMerge())
	        		{
	        			score += descriptor.getValue() * 2;
	        		}
	        		//new tile
	        		TilePosition position = generateTile();
	        		moves.setNewTile(position);
	    		}
    		}
    	}
    	
    }
    else if (dir.equals(RIGHT))
    {
    	for (int row = 0; row < grid.length; row++)
    	{
    		int gridCol = grid.length - 1;
  		  	for (int thisRow_Col = 0; thisRow_Col < thisRow.length; thisRow_Col++)
  		  	{
  		  		thisRow[thisRow_Col] = grid[row][gridCol--];
  		  	}
  		  	ArrayList<Shift> shifts = util.shiftAll(thisRow);
  		  	gridCol = grid.length - 1;
		  	for (int thisRow_Col = 0; thisRow_Col < thisRow.length; thisRow_Col++)
		  	{
		  		grid[row][gridCol--] = thisRow[thisRow_Col];
		  	}
		  	
		  //make descriptors based on shiftAll return and add to moves
    		for (int s = 0; s < shifts.size(); s++)
    		{
    			if(shifts.get(s) != null)
        		{
        			Descriptor descriptor = new Descriptor(shifts.get(s), row, RIGHT);
            		moves.addMove(descriptor);
            		//scoring
	        		if (descriptor.isMerge())
	        		{
	        			score += descriptor.getValue();
	        		}
	        		//new tile
            		TilePosition position = generateTile();
            		moves.setNewTile(position);
        		}
    		}
    	}
    }
    else if (dir.equals(UP))
    {
    	for (int col = 0; col < grid.length; col++)
    	{
    		for (int i = 0; i < grid.length; i++)
    		{
    			thisCol[i] = grid[i][col];
    		} 
    		ArrayList<Shift> shifts = util.shiftAll(thisCol);
    		for (int i = 0; i < grid.length; i++)
    		{
    			grid[i][col] = thisCol[i];
    		}
    		
    		//make descriptors based on shiftAll return and add to moves
    		for (int s = 0; s < shifts.size(); s++)
    		{
	    		if(shifts.get(s) != null)
	    		{
	    			Descriptor descriptor = new Descriptor(shifts.get(s), col, UP);
	        		moves.addMove(descriptor);
	        		//scoring
	        		if (descriptor.isMerge())
	        		{
	        			score += descriptor.getValue();
	        		}
	        		//new tile
	        		TilePosition position = generateTile();
	        		moves.setNewTile(position);
	    		}
    		}
    	}
    }
    else if (dir.equals(DOWN))
    {
    	for (int col = 0; col < grid.length; col++)
    	{
    		int gridRow = grid.length - 1;
  		  	for (int thisRow_Col = 0; thisRow_Col < thisRow.length; thisRow_Col++)
  		  	{
  		  		thisRow[thisRow_Col] = grid[col][gridRow--];
  		  	}
  		  	ArrayList<Shift> shifts = util.shiftAll(thisRow);
  		  	gridRow = grid.length - 1;
		  	for (int thisRow_Col = 0; thisRow_Col < thisRow.length; thisRow_Col++)
		  	{
		  		grid[col][gridRow--] = thisRow[thisRow_Col];
		  	}
		  	
		  //make descriptors based on shiftAll return and add to moves
		  	for (int s = 0; s < shifts.size(); s++)
    		{
			  	if(shifts.get(s) != null)
	    		{
	    			Descriptor descriptor = new Descriptor(shifts.get(s), col, DOWN);
	        		moves.addMove(descriptor);
	        		//scoring
	        		if (descriptor.isMerge())
	        		{
	        			score += descriptor.getValue();
	        		}
	        		//new tile
	        		TilePosition position = generateTile();
	        		moves.setNewTile(position);
	    		}
    		}
    	}
    }
    
    return moves;
  }

  /**
   * Use this game's instance of <code>Random</code> to generate
   * a new tile.  The tile's row and column must be an empty cell
   * of the grid, and the tile's value is either 2 or 4. 
   * The tile is selected in such a way that
   * <ul>
   *   <li>All empty cells of the grid are equally likely
   *   <li>The tile's value is a 2 with 90% probability and a 4 with 10% probability
   * </ul>
   * This method does not modify the grid.  If the grid has no
   * empty cells, returns null.
   * @return
   *   a new TilePosition containing the row, column, and value of the
   *   selected new tile, or null if the grid has no empty cells
   */
  public TilePosition generateTile()
  {
	TilePosition position = null;
    ArrayList<TilePosition> openPositions = new ArrayList<TilePosition>();
	
    for(int row = 0; row < grid.length; row++)
    {
    	for (int col = 0; col < grid.length; col++)
    	{
    		if(grid[row][col] == 0)
    		{
    			position = new TilePosition(row, col, 0);
    			openPositions.add(position);
    		}
    	}
    }
    
    int randomPosition = rand.nextInt(openPositions.size() - 1);
    int numberSelecter = rand.nextInt(99) + 1;
    if (numberSelecter >= 1 && numberSelecter <= 90)
    {
    	position = new TilePosition(openPositions.get(randomPosition).getRow(), openPositions.get(randomPosition).getCol(), 2);
    }
    else
    {
    	position = new TilePosition(openPositions.get(randomPosition).getRow(), openPositions.get(randomPosition).getCol(), 4);
    }
    
	return position;
  }

}
